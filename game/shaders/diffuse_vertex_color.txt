AEONPLN
topology: TRIANGLE_LIST
uniform {
  name: "LightPosition"
  type: VECTOR_FLOAT_3
}
uniform {
  name: "Kd"
  type: VECTOR_FLOAT_3
}
vertex_shader {
  code:
  "layout(location = 0) out vec3 LightIntensity;\n"
  "layout(location = 1) out vec3 Color;\n"
  "void main()\n"
  "{\n"
  "if ( length ( VertexNormal ) != 0 )\n"
  "{\n"
  "vec3 tnorm = normalize ( mat3(ViewMatrix) * VertexNormal );\n"
  "vec4 eyeCoords = ViewMatrix /* ModelMatrix */* vec4 ( VertexPosition, 1.0 );\n"
  "vec3 s = normalize ( LightPosition - eyeCoords.xyz );\n"
  "LightIntensity = Kd * max ( dot ( s, tnorm ), 0.0 );\n"
  "}\n"
  "else\n"
  "{\n"
  "LightIntensity = vec3(1,1,1);\n"
  "}\n"
  "gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix * vec4(VertexPosition, 1.0);\n"
  "Color = VertexColor;\n"
  "}\n"
}
fragment_shader {
  code:
  "layout(location = 0) in vec3 LightIntensity;\n"
  "layout(location = 1) in vec3 Color;\n"
  "layout ( location = 0 ) out vec4 FragColor;\n"
  "\n"
  "void main()\n"
  "{\n"
  "if(gl_FrontFacing)\n"
  "{\n"
  "FragColor = vec4(Color,1.0) * vec4(LightIntensity, 1.0);\n"
  "}\n"
  "else\n"
  "{\n"
  "FragColor = vec4 ( 1.0,0.5,0.5, 1.0 );\n"
  "}\n"
  "}\n"
}
