AEONPRG
glsl_version: 420
default_material {
    property {
      uniform_name: "LightPosition"
      display_name: "Light position in eye coords"
      vector3 {
        x: 0
        y: 0
        z: 0
      }
    }
    property {
      uniform_name: "Kd"
      display_name: "Diffuse reflectivity"
      vector3 {
        x: 1
        y: 1
        z: 1
      }
    }
    property {
      uniform_name: "DiffuseMap"
      display_name: "Diffuse Map"
      texture: "game/images/orange.png"
    }
}
vertex_shader {
  code: 
  "layout(location = 0) out vec3 LightIntensity;\n"
  "layout(location = 1) out vec2 CoordUV;\n"
  "void main()\n"
  "{\n"
  "if ( length ( VertexNormal ) != 0 )\n"
  "{\n"
  "vec3 tnorm = normalize ( NormalMatrix * VertexNormal );\n"
  "vec4 eyeCoords = ModelViewMatrix * vec4 ( VertexPosition, 1.0 );\n"
  "vec3 s = normalize ( LightPosition - eyeCoords.xyz );\n"
  "LightIntensity = Kd * max ( dot ( s, tnorm ), 0.0 );\n"
  "}\n"
  "else\n"
  "{\n"
  "LightIntensity = vec3(1,1,1);\n"
  "}\n"
  "gl_Position = ModelViewProjectionMatrix * vec4(VertexPosition, 1.0);\n"
  "CoordUV = VertexUV;\n"
  "}\n"
}
fragment_shader {
  code: 
  "layout(location = 0) in vec3 LightIntensity;\n"
  "layout(location = 1) in vec2 CoordUV;\n"
  "layout ( location = 0 ) out vec4 FragColor;\n"
  "\n"
  "void main()\n"
  "{\n"
  "if(gl_FrontFacing)\n"
  "{\n"
  "//FragColor = vec4 ( texture(DiffuseMap,CoordUV) * vec4(LightIntensity, 1.0) );\n"
  "FragColor = texture(DiffuseMap,CoordUV);\n"
  "}\n"
  "else\n"
  "{\n"
  "FragColor = vec4 ( 1.0,0.5,0.5, 1.0 );\n"
  "}\n"
  "}\n"
}
