AEONPLN
vert:
  "#version 450\n"
  "layout(binding = 0, std140) uniform Matrices{\n"
  "mat4 ModelMatrix;\n"
  "mat4 ProjectionMatrix;\n"
  "mat4 ViewMatrix;\n"
  "};\n"
  "layout(binding = 1, std140) uniform Properties{\n"
  "  vec3 LightPosition;\n"
  "  vec3 Kd;\n"
  "};\n"
  "layout(binding = 2, std140) uniform Skeleton{\n"
  "mat4 skeleton[256];\n"
  "};\n"
  "layout(location = 0) in vec3 VertexPosition;\n"
  "layout(location = 1) in vec3 VertexNormal;\n"
  "layout(location = 4) in vec2 VertexUV;\n"
  "layout(location = 5) in uvec4 VertexWeightIndices;\n"
  "layout(location = 6) in vec4 VertexWeights;\n"
  "layout(location = 0) out vec3 LightIntensity;\n"
  "layout(location = 1) out vec2 CoordUV;\n"
  "void main()\n"
  "{\n"
  "if ( length ( VertexNormal ) != 0 )\n"
  "{\n"
  "      vec3 vertex_normal =\n"
  "normalize(( mat3(skeleton[VertexWeightIndices[0]]) * (VertexWeights[0] * VertexNormal) ) +\n"
  "          ( mat3(skeleton[VertexWeightIndices[1]]) * (VertexWeights[1] * VertexNormal) ) +\n"
  "          ( mat3(skeleton[VertexWeightIndices[2]]) * (VertexWeights[2] * VertexNormal) ) +\n"
  "          ( mat3(skeleton[VertexWeightIndices[3]]) * (VertexWeights[3] * VertexNormal) ));\n"
  "vec3 tnorm = normalize ( mat3(ViewMatrix) * vertex_normal );\n"
  "vec4 eyeCoords = ViewMatrix /* ModelMatrix */* vec4 ( VertexPosition, 1.0 );\n"
  "vec3 s = normalize ( LightPosition - eyeCoords.xyz );\n"
  "LightIntensity = Kd * max ( dot ( s, tnorm ), 0.0 );\n"
  "}\n"
  "else\n"
  "{\n"
  "LightIntensity = vec3(1,1,1);\n"
  "}\n"
  "vec4 weighted_position =\n"
  "      ( skeleton[VertexWeightIndices[0]] * VertexWeights[0] * vec4 ( VertexPosition, 1 ) ) +\n"
  "      ( skeleton[VertexWeightIndices[1]] * VertexWeights[1] * vec4 ( VertexPosition, 1 ) ) +\n"
  "      ( skeleton[VertexWeightIndices[2]] * VertexWeights[2] * vec4 ( VertexPosition, 1 ) ) +\n"
  "      ( skeleton[VertexWeightIndices[3]] * VertexWeights[3] * vec4 ( VertexPosition, 1 ) );\n"
  "gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix * vec4(weighted_position.xyz, 1.0);\n"
  "CoordUV = VertexUV;\n"
  "}\n"

frag:
  "#version 450\n"
  "layout(binding = 0) uniform sampler2D DiffuseMap;\n"
  "layout(location = 0) in vec3 LightIntensity;\n"
  "layout(location = 1) in vec2 CoordUV;\n"
  "layout ( location = 0 ) out vec4 FragColor;\n"
  "\n"
  "void main()\n"
  "{\n"
  "if(gl_FrontFacing)\n"
  "{\n"
  "FragColor = vec4 ( texture(DiffuseMap,CoordUV) * vec4(LightIntensity, 1.0) );\n"
  "//FragColor = texture(DiffuseMap,CoordUV);\n"
  "}\n"
  "else\n"
  "{\n"
  "FragColor = vec4 ( 1.0,0.5,0.5, 1.0 );\n"
  "}\n"
  "}\n"
