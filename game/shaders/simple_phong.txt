AEONPRG
default_material {
    property {
      name: "LightPosition"
      vector3 {
        x: 0
        y: 0
        z: 0
      }
    }
    property {
      name: "Kd"
      vector3 {
        x: 1
        y: 1
        z: 1
      }
    }
    property {
      name: "Ld"
      vector3 {
        x: 0.5
        y: 0.5
        z: 1
      }
    }
}
topology: TRIANGLE_LIST
vertex_shader {
  code: "layout(location = 0) out vec3 LightIntensity;\n"
  "void main()\n"
  "{\n"
  "if ( length ( VertexNormal ) != 0 )\n"
  "{\n"
  "vec3 tnorm = normalize ( transpose(inverse(mat3(ViewMatrix) * mat3(ModelMatrix))) * VertexNormal );\n"
  "vec4 eyeCoords = ViewMatrix * ModelMatrix * vec4 ( VertexPosition, 1.0 );\n"
  "vec3 s = normalize ( LightPosition - eyeCoords.xyz );\n"
  "LightIntensity = Ld * Kd * max ( dot ( s, tnorm ), 0.0 );\n"
  "}\n"
  "else\n"
  "{\n"
  "LightIntensity = Ld;\n"
  "}\n"
  "gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix * vec4(VertexPosition, 1.0);\n"
  "}\n"
}
fragment_shader {
  code: "layout(location = 0)in vec3 LightIntensity;\n"
  "layout ( location = 0 ) out vec4 FragColor;\n"
  "\n"
  "void main()\n"
  "{\n"
  "if(gl_FrontFacing)\n"
  "{\n"
  "FragColor = vec4 ( LightIntensity, 1.0 );\n"
  "}\n"
  "else\n"
  "{\n"
  "FragColor = vec4 ( 1.0,0.5,0.5, 1.0 );\n"
  "}\n"
  "}\n"
}
