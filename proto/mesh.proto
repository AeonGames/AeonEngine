// Copyright (C) 2016,2018,2019,2021,2025 Rodrigo Jose Hernandez Cordoba
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package AeonGames;

import "vector3.proto";

message AttributeMsg
{
    enum AttributeSemantic
    {
        UNUSED              = 0x0;
        POSITION            = 0x3DE95988;
        NORMAL              = 0x06843867;
        TANGENT             = 0x508CD822;
        BITANGENT           = -863954250; //0xCC811AB6;
        TEXCOORD            = 0x7683CFA6;
        WEIGHT_INDEX        = 0x48129712;
        WEIGHT_VALUE        = 0x6E44A092;
        COLOR               = 0x65476198;
    }
    enum AttributeType
    {
        BYTE                   =  0;
        UNSIGNED_BYTE          =  1;
        SHORT                  =  2;
        UNSIGNED_SHORT         =  3;
        HALF_FLOAT             =  4;
        INT                    =  5;
        UNSIGNED_INT           =  6;
        FLOAT                  =  7;
        FIXED                  =  8;
        DOUBLE                 =  9;
    }
    enum AttributeFlags
    {
        NONE                   = 0x00;
        NORMALIZED             = 0x01;
        INTEGER                = 0x02;
    }
    AttributeSemantic    Semantic    = 1;
    uint32               Size        = 2;
    AttributeType        Type        = 3;
    uint32               Flags       = 4;
}

message MeshMsg {
	uint32 Version                   = 1;
    Vector3Msg Center                = 2;
    Vector3Msg Radii                 = 3;
    repeated AttributeMsg Attribute  = 4;
    uint32 VertexCount               = 5;
    uint32 IndexSize                 = 6;		
    uint32 IndexCount                = 7;
    bytes VertexBuffer               = 8;
    bytes IndexBuffer                = 9;
}
