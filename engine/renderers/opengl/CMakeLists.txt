# Copyright (C) 2016-2019,2021,2025 Rodrigo Jose Hernandez Cordoba
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

find_package(OpenGL)
if(UNIX)
  find_package(X11)
endif()

include_directories(${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_SOURCE_DIR}/include)

set(CMAKE_REQUIRED_QUIET OFF)

set(CMAKE_REQUIRED_INCLUDES ${CMAKE_CURRENT_BINARY_DIR})

check_include_file_cxx("GL/glcorearb.h" HAS_GLCOREARB_H)
if(NOT HAS_GLCOREARB_H)
  message(STATUS "Downloading KHR/khrplatform.h")
  file(DOWNLOAD https://www.khronos.org/registry/EGL/api/KHR/khrplatform.h
                "${CMAKE_CURRENT_BINARY_DIR}/KHR/khrplatform.h"
       SHOW_PROGRESS)
  message(STATUS "Downloading GL/glcorearb.h")
  file(DOWNLOAD https://www.khronos.org/registry/OpenGL/api/GL/glcorearb.h
                "${CMAKE_CURRENT_BINARY_DIR}/GL/glcorearb.h"
       SHOW_PROGRESS)
  set(HAS_GLCOREARB_H 1 CACHE INTERNAL "Downloaded header file" FORCE)
  set(GLCOREARB_H_PATH "${CMAKE_CURRENT_BINARY_DIR}/GL/glcorearb.h")
else()
  find_file(GLCOREARB_H_PATH NAMES "glcorearb.h" PATHS ${CMAKE_CURRENT_BINARY_DIR} PATH_SUFFIXES $ENV{MSYSTEM_CHOST}/include/GL GL NO_CACHE)
endif()

if(WIN32)
  check_include_files("GL/gl.h;GL/wglext.h" HAS_WGLEXT_H)
  if(NOT HAS_WGLEXT_H)
    message(STATUS "Downloading GL/wglext.h")
    file(DOWNLOAD https://www.khronos.org/registry/OpenGL/api/GL/wglext.h
                  "${CMAKE_CURRENT_BINARY_DIR}/GL/wglext.h"
         SHOW_PROGRESS)
    set(HAS_WGLEXT_H 1 CACHE INTERNAL "Downloaded header file" FORCE)
  endif()
endif()

message(STATUS "Generator ${CMAKE_GENERATOR}")
if(CMAKE_GENERATOR MATCHES "[Mm]ake")
  set(DOLLAR_SIGN "$$")
else()
  set(DOLLAR_SIGN "$")
endif()

add_custom_command(
  OUTPUT
         ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
         ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
         ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
  COMMAND
    ${SED_EXECUTABLE}
    "\"s/^\\s*\\(gl\\S*\\)\\s*${DOLLAR_SIGN}/extern PFN\\U\\1\\EPROC \\1$<SEMICOLON>/g\""
    glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
  COMMAND
    ${SED_EXECUTABLE}
    "\"s/^\\s*\\(gl\\S*\\)\\s*${DOLLAR_SIGN}/PFN\\U\\1\\EPROC \\1 = nullptr$<SEMICOLON>/g\""
    glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
  COMMAND
    ${SED_EXECUTABLE}
    "\"s/^\\s*\\(gl\\S*\\)\\s*${DOLLAR_SIGN}/GLGETPROCADDRESS ( PFN\\U\\1\\EPROC, \\1 )$<SEMICOLON>/g\""
    glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
  COMMAND
    ${SED_EXECUTABLE} -i
    "\"s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g\""
    ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
  COMMAND
    ${SED_EXECUTABLE} -i
    "\"s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g\""
    ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
  COMMAND
    ${SED_EXECUTABLE} -i
    "\"s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g\""
    ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/glFunctions.txt
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  COMMENT "Generating OpenGL functions for ${CMAKE_GENERATOR}.")

#/************************************************************************/
# This Awful mess of cmake code is here to generate proxy functions for
# the OpenGL functions. These proxy functions are used for debugging
# OpenGL calls and should not be part of a production build.
# Ideally this would be generated by a cmake target at build time,
# so maybe look into using cmake to run this as a script
# inheriting the cache.
#/************************************************************************/

execute_process(
  COMMAND
  ${CMAKE_CXX_COMPILER} ${PREPROCESS_ONLY_FLAGS} ${CMAKE_CURRENT_SOURCE_DIR}/glFunctions.txt "${PREPROCESS_OUTPUT_FLAG}${CMAKE_CURRENT_BINARY_DIR}/glFunctions.i"
)
file(STRINGS "${CMAKE_CURRENT_BINARY_DIR}/glFunctions.i" glFunctions REGEX "^gl")

string(REGEX REPLACE ";" " |" glFunctions "${glFunctions} ")
file(STRINGS "${GLCOREARB_H_PATH}" glPrototypes REGEX "${glFunctions}")
string(REGEX REPLACE "GLAPI |APIENTRY |\\\\;" "" glPrototypes "${glPrototypes}")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.h  "#ifndef AEONGAMES_GLPROXYFUNCTIONS_H\n")
file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.h "#define AEONGAMES_GLPROXYFUNCTIONS_H\n")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp  "#include \"OpenGLFunctions.h\"\n")
file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp "namespace AeonGames {\n")
foreach(glPrototype IN LISTS glPrototypes)
  string(REGEX MATCH "[(].*[)]"
    arguments "${glPrototype}")
  string(REGEX REPLACE "[A-Za-z0-9_* ]+[ *]([A-Za-z0-9_]+)" "\\1"
    arguments "${arguments}")
  string(REGEX REPLACE "\\([ \t]*void[ \t]*\\)" "()"
    arguments "${arguments}")
  string(REGEX MATCH "[^(]+"
    type_and_function "${glPrototype}")
  string(REGEX MATCH "[A-Za-z0-9_]+[ ]*$" glFunction "${type_and_function}")
  string(REGEX REPLACE "[ ]+" "" glFunction "${glFunction}")
  string(REGEX REPLACE "[ ]*${glFunction}[ ]+" "" glType "${type_and_function}")
  string(REGEX REPLACE "${glFunction}[\t ]*\\(" "${glFunction}Proxy (size_t aLine, const char* aFile, const char* aFunction, " glPrototype "${glPrototype}")
  string(REGEX REPLACE ",[ \t]*void[ \t]*\\)" ")" glPrototype "${glPrototype}")

  file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.h "${glPrototype};\n")
  file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.h "#define ${glFunction}(...) ${glFunction}Proxy(__LINE__, __FILE__, __FUNCTION__ ${PREPROCESS_VA_OPT} __VA_ARGS__ )\n")
  file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp "#undef ${glFunction}\n")
  file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp "${glPrototype} {\n")
  if(glType STREQUAL "void")
    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp "    ${glFunction}${arguments};\n")
    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp "    OPENGL_CHECK_ERROR_NO_THROW_LINE_FILE_FUNCTION(aLine,aFile,aFunction);\n")
  else()
    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp "    ${glType} result = ${glFunction}${arguments};\n")
    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp "    OPENGL_CHECK_ERROR_NO_THROW_LINE_FILE_FUNCTION(aLine,aFile,aFunction);\n")
    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp "    return result;\n")
  endif()
  file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp "}\n")
endforeach()
file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.h "#endif\n")
file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp "}\n")
#/************************************************************************/

set(OPENGL_RENDERER_HEADERS
    ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
    ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
    ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
    ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.h
    OpenGLRenderer.h
    OpenGLWindow.h
    OpenGLFunctions.h
    OpenGLBuffer.h
    OpenGLMesh.h
    OpenGLPipeline.h
    OpenGLMaterial.h
    OpenGLTexture.h
    OpenGLFrameBuffer.h
    OpenGLMemoryPoolBuffer.h)

set(OPENGL_RENDERER_SOURCES
    ${CMAKE_CURRENT_BINARY_DIR}/glProxyFunctions.cpp
    OpenGLRenderer.cpp
    OpenGLWindow.cpp
    OpenGLBuffer.cpp
    OpenGLMesh.cpp
    OpenGLPipeline.cpp
    OpenGLMaterial.cpp
    OpenGLTexture.cpp
    OpenGLFunctions.cpp
    OpenGLFrameBuffer.cpp
    OpenGLMemoryPoolBuffer.cpp
    Plugin.cpp)

# set_source_files_properties(OpenGLFunctions.cpp PROPERTIES COMPILE_FLAGS "-E")

add_library(OpenGLRenderer
            SHARED
            ${OPENGL_RENDERER_HEADERS}
            ${OPENGL_RENDERER_SOURCES}
            ${CMAKE_SOURCE_DIR}/include/aeongames/Renderer.h)

if(IWYU_PROGRAM)
  set_property(TARGET OpenGLRenderer PROPERTY CXX_INCLUDE_WHAT_YOU_USE ${IWYU_COMMAND_LINE})
endif()

target_link_libraries(OpenGLRenderer
                      ${OPENGL_LIBRARIES}
                      ${X11_LIBRARIES}
                      ProtoBufClasses
                      AeonEngine
                      Threads::Threads)

if(MSVC)
  set_target_properties(
    OpenGLRenderer
    PROPERTIES COMPILE_FLAGS "-WX -D_CRT_SECURE_NO_WARNINGS")
elseif(MINGW OR MSYS)
  set_target_properties(OpenGLRenderer PROPERTIES PREFIX "")
endif()

set_property(GLOBAL APPEND PROPERTY PLUGINS OpenGLRenderer)

if(USE_CLANG_TIDY)
  set_target_properties(
    OpenGLRenderer
    PROPERTIES
      CXX_CLANG_TIDY
      "${CLANG_TIDY_EXECUTABLE};-fix;-header-filter=aeongames/;${CLANG_TIDY_CHECKS}"
    )
endif()
