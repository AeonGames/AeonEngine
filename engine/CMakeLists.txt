# Copyright 2016 Rodrigo Jose Hernandez Cordoba
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include_directories(
    ${CMAKE_SOURCE_DIR}/engine
    ${CMAKE_SOURCE_DIR}/engine/renderers/opengl
    ${CMAKE_SOURCE_DIR}/engine/renderers/vulkan
    ${CMAKE_SOURCE_DIR}/include
    ${VULKAN_INCLUDE_DIR}
    ${PROTOBUF_INCLUDE_DIR}
    ${CMAKE_CURRENT_BINARY_DIR}
)

PROTOBUF_GENERATE_CPP(PROTOBUF_SOURCES PROTOBUF_HEADERS
    ${CMAKE_SOURCE_DIR}/proto/vector2.proto
    ${CMAKE_SOURCE_DIR}/proto/vector3.proto
    ${CMAKE_SOURCE_DIR}/proto/vector4.proto
    ${CMAKE_SOURCE_DIR}/proto/mesh.proto
    ${CMAKE_SOURCE_DIR}/proto/program.proto
    ${CMAKE_SOURCE_DIR}/proto/material.proto
)

add_custom_command( OUTPUT
                        ${CMAKE_CURRENT_BINARY_DIR}/main.vert.h
                        ${CMAKE_CURRENT_BINARY_DIR}/main.frag.h
                    COMMAND ${XXD_EXECUTABLE} -i main.vert > ${CMAKE_CURRENT_BINARY_DIR}/main.vert.h
                    COMMAND ${XXD_EXECUTABLE} -i main.frag > ${CMAKE_CURRENT_BINARY_DIR}/main.frag.h
                    DEPENDS
                        renderers/opengl/shaders/main.vert
                        renderers/opengl/shaders/main.frag
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/renderers/opengl/shaders
                    COMMENT "Generating Shader Headers" VERBATIM)
if(MSVC)
add_custom_command(OUTPUT
                        ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
                        ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
                        ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
                        COMMAND ${SED_EXECUTABLE} ARGS "s/^\\s*\\(gl\\S*\\)\\s*$/extern PFN\\U\\1\\EPROC \\1$<SEMICOLON>/g" glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
                        COMMAND ${SED_EXECUTABLE} ARGS "s/^\\s*\\(gl\\S*\\)\\s*$/PFN\\U\\1\\EPROC \\1 = nullptr$<SEMICOLON>/g" glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
                        COMMAND ${SED_EXECUTABLE} ARGS "s/^\\s*\\(gl\\S*\\)\\s*$/GLGETPROCADDRESS ( PFN\\U\\1\\EPROC, \\1 )$<SEMICOLON>/g" glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
                        COMMAND ${SED_EXECUTABLE} ARGS -i "s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g" ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
                        COMMAND ${SED_EXECUTABLE} ARGS -i "s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g" ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
                        COMMAND ${SED_EXECUTABLE} ARGS -i "s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g" ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
                        DEPENDS
                            ${CMAKE_CURRENT_SOURCE_DIR}/renderers/opengl/glFunctions.txt
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/renderers/opengl
                        COMMENT "Generating OpenGL functions.")
elseif(MSYS)
add_custom_command(OUTPUT
                        ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
                        ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
                        ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
                        COMMAND ${SED_EXECUTABLE} ARGS "s/^\\s*\\(gl\\S*\\)\\s*$$/extern PFN\\U\\1\\EPROC \\1$<SEMICOLON>/g" glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
                        COMMAND ${SED_EXECUTABLE} ARGS "s/^\\s*\\(gl\\S*\\)\\s*$$/PFN\\U\\1\\EPROC \\1 = nullptr$<SEMICOLON>/g" glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
                        COMMAND ${SED_EXECUTABLE} ARGS "s/^\\s*\\(gl\\S*\\)\\s*$$/GLGETPROCADDRESS ( PFN\\U\\1\\EPROC, \\1 )$<SEMICOLON>/g" glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
                        COMMAND ${SED_EXECUTABLE} ARGS -i "s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g" ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
                        COMMAND ${SED_EXECUTABLE} ARGS -i "s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g" ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
                        COMMAND ${SED_EXECUTABLE} ARGS -i "s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g" ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
                        DEPENDS
                            ${CMAKE_CURRENT_SOURCE_DIR}/renderers/opengl/glFunctions.txt
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/renderers/opengl
                        COMMENT "Generating OpenGL functions.")
elseif(UNIX)
add_custom_command(OUTPUT
                        ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
                        ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
                        ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
                        COMMAND ${SED_EXECUTABLE} ARGS "'s/^\\s*\\(gl\\S*\\)\\s*$$/extern PFN\\U\\1\\EPROC \\1$<SEMICOLON>/g'" glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
                        COMMAND ${SED_EXECUTABLE} ARGS "'s/^\\s*\\(gl\\S*\\)\\s*$$/PFN\\U\\1\\EPROC \\1 = nullptr$<SEMICOLON>/g'" glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
                        COMMAND ${SED_EXECUTABLE} ARGS "'s/^\\s*\\(gl\\S*\\)\\s*$$/GLGETPROCADDRESS ( PFN\\U\\1\\EPROC, \\1 )$<SEMICOLON>/g'" glFunctions.txt > ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
                        COMMAND ${SED_EXECUTABLE} ARGS -i "'s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g'" ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
                        COMMAND ${SED_EXECUTABLE} ARGS -i "'s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g'" ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
                        COMMAND ${SED_EXECUTABLE} ARGS -i "'s/\\*DISCLAIMER\\*/ THIS FILE WAS AUTOGENERATED, DO NOT EDIT, edit glFunctions.txt instead. /g'" ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
                        DEPENDS
                            ${CMAKE_CURRENT_SOURCE_DIR}/renderers/opengl/glFunctions.txt
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/renderers/opengl
                        COMMENT "Generating OpenGL functions.")
endif()

set(ENGINE_SDK_HEADERS
    ${CMAKE_SOURCE_DIR}/include/aeongames/Platform.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/LogLevel.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/Mesh.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/Material.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/Program.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/Model.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/Node.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/ResourceCache.h)

set(ENGINE_VULKAN_RENDERER_HEADERS
    renderers/vulkan/VulkanRenderer.h)

set(ENGINE_OPENGL_RENDERER_HEADERS
    ${CMAKE_CURRENT_BINARY_DIR}/main.vert.h
    ${CMAKE_CURRENT_BINARY_DIR}/main.frag.h
    ${CMAKE_CURRENT_BINARY_DIR}/glDeclarations.h
    ${CMAKE_CURRENT_BINARY_DIR}/glDefinitions.h
    ${CMAKE_CURRENT_BINARY_DIR}/glAssignments.h
    renderers/opengl/OpenGLRenderer.h
    renderers/opengl/OpenGLFunctions.h
    renderers/opengl/OpenGLProgram.h
    renderers/opengl/OpenGLMaterial.h
    renderers/opengl/OpenGLMesh.h
    renderers/opengl/Uniform.h)

set(ENGINE_CORE_HEADERS
    ${CMAKE_SOURCE_DIR}/include/aeongames/AeonEngine.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/Renderer.h)

set(ENGINE_SCENEGRAPH_HEADERS
    ${CMAKE_SOURCE_DIR}/include/aeongames/Scene.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/Node.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/Model.h)

set(ENGINE_MATH_HEADERS
    math/Vector4.h
    math/Vector3.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/Matrix4x4.h
    ${CMAKE_SOURCE_DIR}/include/aeongames/Transform.h)

set(ENGINE_CORE_SOURCES
    core/AeonEngine.cpp
    core/LogLevel.cpp)

set(ENGINE_VULKAN_RENDERER_SOURCES
    renderers/vulkan/VulkanRenderer.cpp)

set(ENGINE_OPENGL_RENDERER_SOURCES
    renderers/opengl/OpenGLRenderer.cpp
    renderers/opengl/OpenGLProgram.cpp
    renderers/opengl/OpenGLMaterial.cpp
    renderers/opengl/OpenGLMesh.cpp
    renderers/opengl/OpenGLFunctions.cpp
    renderers/opengl/Uniform.cpp)

set(ENGINE_SCENEGRAPH_SOURCES
    scenegraph/Scene.cpp
    scenegraph/Node.cpp
    scenegraph/Model.cpp)

set(ENGINE_MATH_SOURCES
    math/Vector4.cpp
    math/Vector3.cpp
    math/Matrix4x4.cpp
    math/Transform.cpp)

source_group("sdk" FILES ${ENGINE_SDK_HEADERS})
source_group("core" FILES ${ENGINE_CORE_HEADERS} ${ENGINE_CORE_SOURCES})
source_group("vulkan" FILES ${ENGINE_VULKAN_RENDERER_HEADERS} ${ENGINE_VULKAN_RENDERER_SOURCES})
source_group("opengl" FILES ${ENGINE_OPENGL_RENDERER_HEADERS} ${ENGINE_OPENGL_RENDERER_SOURCES})
source_group("scenegraph" FILES ${ENGINE_SCENEGRAPH_HEADERS} ${ENGINE_SCENEGRAPH_SOURCES})
source_group("math" FILES ${ENGINE_MATH_HEADERS} ${ENGINE_MATH_SOURCES})
source_group("protobuf" FILES ${PROTOBUF_SOURCES} ${PROTOBUF_HEADERS})

set(ENGINE_SOURCES  ${ENGINE_SDK_HEADERS} ${ENGINE_CORE_HEADERS} ${ENGINE_CORE_SOURCES}
                    ${ENGINE_RENDERER_HEADERS} ${ENGINE_RENDERER_SOURCES}
                    ${ENGINE_SCENEGRAPH_HEADERS} ${ENGINE_SCENEGRAPH_SOURCES}
                    ${ENGINE_MATH_HEADERS} ${ENGINE_MATH_SOURCES})

if(MSVC)
    set_source_files_properties(${PROTOBUF_SOURCES} PROPERTIES COMPILE_FLAGS "-D_SCL_SECURE_NO_WARNINGS -wd4251 -wd4244 -wd4267")
endif()

add_library(OpenGLRenderer SHARED
    ${ENGINE_OPENGL_RENDERER_HEADERS} ${ENGINE_OPENGL_RENDERER_SOURCES}
    ${CMAKE_SOURCE_DIR}/include/aeongames/Renderer.h
    ${PROTOBUF_SOURCES} ${PROTOBUF_HEADERS})

add_library(VulkanRenderer SHARED
    ${ENGINE_VULKAN_RENDERER_HEADERS} ${ENGINE_VULKAN_RENDERER_SOURCES}
    ${CMAKE_SOURCE_DIR}/include/aeongames/Renderer.h
    ${PROTOBUF_SOURCES} ${PROTOBUF_HEADERS})

add_library(engine SHARED ${ENGINE_HEADERS} ${ENGINE_SOURCES})

target_link_libraries(OpenGLRenderer ${OPENGL_LIBRARIES} ${PROTOBUF_LIBRARIES} Threads::Threads)
target_link_libraries(VulkanRenderer ${VULKAN_LIBRARY} ${PROTOBUF_LIBRARIES})
target_link_libraries(engine OpenGLRenderer ${PROTOBUF_LIBRARIES})

if(MSVC)
    set_target_properties(OpenGLRenderer PROPERTIES
        COMPILE_FLAGS "-WX -DDLL_EXPORT -DPROTOBUF_USE_DLLS -D_CRT_SECURE_NO_WARNINGS")
    set_target_properties(VulkanRenderer PROPERTIES
        COMPILE_FLAGS "-WX -DDLL_EXPORT -DPROTOBUF_USE_DLLS -D_CRT_SECURE_NO_WARNINGS -DVK_USE_PLATFORM_WIN32_KHR")
    set_target_properties(engine PROPERTIES
        COMPILE_FLAGS "-WX -DVK_USE_PLATFORM_WIN32_KHR -DDLL_EXPORT -DPROTOBUF_USE_DLLS -D_CRT_SECURE_NO_WARNINGS")
elseif(MINGW OR MSYS)
    set_target_properties(OpenGLRenderer PROPERTIES
        COMPILE_FLAGS "-Wall -Werror -Wfatal-errors -DDLL_EXPORT -DPROTOBUF_USE_DLLS")
    set_target_properties(VulkanRenderer PROPERTIES
        COMPILE_FLAGS "-Wall  -Werror -Wfatal-errors -DDLL_EXPORT -DPROTOBUF_USE_DLLS -DVK_USE_PLATFORM_WIN32_KHR")
    set_target_properties(engine PROPERTIES
        COMPILE_FLAGS "-Wall  -Werror -Wfatal-errors -DDLL_EXPORT -DPROTOBUF_USE_DLLS")
elseif(UNIX)
    set_target_properties(OpenGLRenderer PROPERTIES
        COMPILE_FLAGS "-Wall  -Werror -Wfatal-errors")
    set_target_properties(VulkanRenderer PROPERTIES
        COMPILE_FLAGS "-Wall  -Werror -Wfatal-errors -DVK_USE_PLATFORM_XLIB_KHR")
    set_target_properties(engine PROPERTIES
        COMPILE_FLAGS "-Wall -Werror -Wfatal-errors")
endif()
