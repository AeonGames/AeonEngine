AEONPLN
topology: LINE_LIST
uniform {
  name: "OddLineColor"
  type: VECTOR_FLOAT_4
}
uniform {
  name: "EvenLineColor"
  type: VECTOR_FLOAT_4
}
uniform {
  name: "CentralLineColor"
  type: VECTOR_FLOAT_4
}
uniform {
  name: "BorderLineColor"
  type: VECTOR_FLOAT_4
}
uniform {
  name: "Scale"
  type: VECTOR_FLOAT_3
}
uniform {
  name: "StartingPosition"
  type: VECTOR_FLOAT_3
}
  uniform {
  name: "Offset"
  type: VECTOR_FLOAT_3
}
uniform {
  name: "LineCount"
  type: SCALAR_UINT
}
vertex_shader {
  code:
    "#ifndef VULKAN\n"
    "#define gl_InstanceIndex gl_InstanceID\n"
    "#endif\n"
    "layout(location = 0) flat out uint instance_index;\n"
    "void main()\n"
    "{\n"
    "instance_index = uint ( gl_InstanceIndex );\n"
    "gl_Position =  ProjectionMatrix *\n"
    "               ViewMatrix *\n"
    "               vec4(StartingPosition + (VertexPosition*Scale) + ( Offset * gl_InstanceIndex ),1.0);\n"
    "}\n"
}

fragment_shader {
  code:
    "layout ( location = 0 ) out vec4 FragColor;\n"
    "layout ( location = 0 ) flat in uint instance_index;\n"
    "void main ( void )\n"
    "{\n"
    "    if ( ( instance_index != 0u ) && ( instance_index != ( LineCount - 1u ) ) )\n"
    "    {"
    "        if ( instance_index == ( LineCount / 2u ) )\n"
    "        {\n"
    "            FragColor = CentralLineColor;\n"
    "        }\n"
    "        else if ( instance_index % 2u == 0u )\n"
    "        {\n"
    "            FragColor = OddLineColor;\n"
    "        }\n"
    "        else\n"
    "        {\n"
    "            FragColor = EvenLineColor;\n"
    "        }\n"
    "    }\n"
    "    else\n"
    "    {\n"
    "        FragColor = BorderLineColor;\n"
    "    }\n"
    "}\n"
}
