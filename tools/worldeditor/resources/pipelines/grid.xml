<?xml version="1.0"?>
<shader>
  <name>grid</name>
  <uniforms>
    <block binding="0" name="Matrices">
      <mat4 name="ModelMatrix;"/>
      <mat4 name="ProjectionMatrix;"/>
      <mat4 name="ViewMatrix;"/>
    </block>
    <block binding="1" name="Properties">
      <vec4 name="OddLineColor"/>
      <vec4 name="EvenLineColor"/>
      <vec4 name="CentralLineColor"/>
      <vec4 name="BorderLineColor"/>
      <vec3 name="Scale"/>
      <vec3 name="StartingPosition"/>
      <vec3 name="Offset"/>
      <uint name="LineCount"/>
    </block>
  </uniforms>
  <vertex>
    <attributes>
      <vec3 name="VertexPosition"/>
    </attributes>
    <outputs>
      <uint location ="0" interpolation="flat" name="instance_index"/>
    </outputs>
    <code>
    <![CDATA[
      #ifndef VULKAN
      #define gl_InstanceIndex gl_InstanceID
      #endif
      void main()
      {
      instance_index = uint ( gl_InstanceIndex );
      gl_Position =  ProjectionMatrix *
                     ViewMatrix *
                     vec4(StartingPosition + (VertexPosition*Scale) + ( Offset * gl_InstanceIndex ),1.0);
      }
    ]]>
    </code>
  </vertex>
  <fragment>
    <inputs>
      <uint location="0" interpolation="flat" name="instance_index"/>
    </inputs>
    <outputs>
      <vec4 location="0" name="FragColor"/>
    </outputs>
    <code>
    <![CDATA[
      void main ( void )
      {
          if ( ( instance_index != 0u ) && ( instance_index != ( LineCount - 1u ) ) )
          {
              if ( instance_index == ( LineCount / 2u ) )
              {
                  FragColor = CentralLineColor;
              }
              else if ( instance_index % 2u == 0u )
              {
                  FragColor = OddLineColor;
              }
              else
              {
                  FragColor = EvenLineColor;
              }
          }
          else
          {
              FragColor = BorderLineColor;
          }
      }
    ]]>
    </code>
  </fragment>
</shader>