---
layout: post
title:  "Vulkan"
date:   2017-02-01 13:37:18 -0600
categories: implementation
---

## Vulkan
### 2/1/2017

I've been trying to get the Vulkan renderer working, however the way I envisioned modularity to be in this engine is very close to what you'd expect when writting OpenGL code only.
I was expecting Vulkan to be somewhat similar to OpenGL, and I seem to have made a mistake there. In some ways it is, and in some others it isn't.
There'll be time to ramble on some generalities, but the issue I am tackling right now is that of shader modules.
Vulkan doesn't have a runtime GLSL compiler and everyone seems to just assume you'll be running glslang validator to turn GLSL into SPIR-V as a preprocessing step.
The AeonEngine up to this point in time does not assume that. Linking against the glslang library for runtime compilation is something I have considered, but that doesn't seem as simple as it sounds, if it was, the net would be full of examples by now.
Anyway, the most urging issue I have right now, if I am to keep renderer modularity, is to sadly remove support for [bindless textures](https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_bindless_texture.txt), which at the time I implemented it solved a problem with how I implemented shader properties as UBOs, but Vulkan doesn't support them, so, off they go!.
