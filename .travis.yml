sudo: required
dist: trusty
os: linux
language: cpp
group: edge
env:
  global:
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    - secure: "A8eKoO929vALzUzirYk7VP1znIKyGHiM53sD5863AqZy7Ww6TGY1VYpZCf+ai+5JbQPt/QENJ03qYuCpIuPlsoEqHmsy5V7kgPpHQ1/5nWI9dWlyZlkMLBV+D2dFIELoa0gTeXpPf/j8nHSnSvWTStaGFKIKskMPgBdWDO21cOhldW9pO6bDBnxnfS4UwL+p35UgaxX7ANQd/yiitJqJ2Zk+NwabAb3wU5OYb8iN47W9H28OkLOb4jz/GChRpCfFSUKKmZtxUopdmuDT7HyjrRe65NZPo/9BghG1xrLMUur4Sa/YfNtRWW4v+l88CyYoHZbPMg+z8TCq+C8F5tUmaAMMDU0Mih/WAYT3Ank04IzA3bMCz7e+ZhIT9+h7ahwmg9LykJTTuSJPPXJJxvQgABrvIsn/b0EoQIB+jk+faChZuq4zt/2tFLmTF4DMzXPGPKBBv9CHkPtD+0myBu9kjUKddnYgFzqMPH+a8mxRzoFycZrUxV6QWqj3DdKVe4WBGP9xJr18uMJsRFeDf4MV6jNlKGygfxXHB5FSLzBkOzeW4QVFPpbXKmxdQe6kjpYe5z2ee55zApHx3KVRxDDDxWMj0NMQHN9wJ17FTrbXNXAtItEv1Ja37xgwpAWQVNnGmdwVTseCoa+Xyz+e+Ia9TJ2tcJZZs7KhResefMMowkg="
before_install:
  - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
  - sudo apt-get remove postgresql-9.3 postgresql-contrib-9.3 postgresql-9.4 postgresql-contrib-9.4 postgresql-9.5 postgresql-contrib-9.5 postgresql-9.6 postgresql-contrib-9.6
  - sudo apt-get autoremove
  - sudo add-apt-repository --yes ppa:beineri/opt-qt571-trusty
  - sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test
  - sudo apt-get -qq update
  - sudo apt-get -qq upgrade
  - sudo apt-get install -y sed python python3 python-autopep8 python3-pep8 tar wget cmake autoconf automake libtool curl make unzip zlib1g-dev libpng12-dev vim-common qt57-meta-full git portaudio19-dev libogg-dev libvorbis-dev libgtest-dev
  - sudo apt-get install -y gcc-5 g++-5
  - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5
install:
  - wget https://github.com/google/protobuf/archive/v3.2.0.tar.gz
  - tar -xzf v3.2.0.tar.gz
  - cd protobuf-3.2.0
  - ./autogen.sh
  - ./configure
  - make
  - sudo make install
  - cd ..
  - wget https://vulkan.lunarg.com/sdk/download/1.0.30.0/linux/vulkansdk-linux-x86_64-1.0.30.0.run
  - chmod a+x vulkansdk-linux-x86_64-1.0.30.0.run
  - sudo ./vulkansdk-linux-x86_64-1.0.30.0.run
  - echo "VULKAN_SDK=$PWD/VulkanSDK/1.0.30.0/x86_64" >> ~/.bashrc
  - echo "export VULKAN_SDK" >> ~/.bashrc
  - echo "export PATH=$PWD/VulkanSDK/1.0.30.0/bin:$PATH" >> ~/.bashrc   
  - echo "export LD_LIBRARY_PATH=$PWD/VulkanSDK/1.0.30.0/lib:$LD_LIBRARY_PATH" >> ~/.bashrc
  - echo "export VK_LAYER_PATH=$PWD/VulkanSDK/1.0.30.0/etc/explicit_layer.d" >> ~/.bashrc
  - source ~/.bashrc
  - sudo ldconfig
  - git clone https://github.com/KhronosGroup/glslang.git
  - cd glslang
  - git checkout 8f674e821e1e5f628474b21d7fe21af2e86b5fb4
  - cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/usr/local .
  - make -j4
  - sudo make -j4 install
  - sudo ldconfig
  - cd ..
  - source /opt/qt57/bin/qt57-env.sh
  - git clone https://github.com/paceholder/nodeeditor.git
  - cd nodeeditor
  - git checkout b2aa9bc166c2b06d543049d74e6c70b696f97c42
  - echo "install(TARGETS nodes RUNTIME DESTINATION bin LIBRARY DESTINATION bin ARCHIVE DESTINATION lib)" >> CMakeLists.txt
  - echo "install(DIRECTORY src/ DESTINATION include/nodes FILES_MATCHING PATTERN \"*.hpp\")" >> CMakeLists.txt
  - mkdir build
  - cd build
  - cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/usr/local ..
  - make -j4
  - sudo make -j4 install
  - sudo ldconfig
  - cd ../..
before_script:
  - source /opt/qt57/bin/qt57-env.sh
  - cmake -G "Unix Makefiles" .
script:
  - make -j4 VERBOSE=1
notifications:
  email: false
addons:
  coverity_scan:
    project:
      name: "AeonGames/AeonEngine"
    notification_email: kwizatz@aeongames.com
    build_command_prepend: "cmake -G\\\"Unix Makefiles\\\" .; make clean"
    build_command:   "make -j4"
    branch_pattern: coverity_scan
